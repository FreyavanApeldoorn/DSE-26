import sys
import os
import numpy as np

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from DetailedDesign.funny_inputs import funny_inputs
# from power import Power
from propulsion import Propulsion
from mission import Mission
from deployment import Deployment

class Thermal:
    '''
    The thermal class contains the thermal subsystem sizing. 
    '''

    def __init__(self, inputs: dict[str, float], hardware=None) -> None:
        self.inputs = inputs
        self.hardware = hardware
        
        # Power required for each phase
        self.power_required_VTOL = inputs["power_required_VTOL"]
        self.power_required_cruise = inputs["power_required_cruise"]
        self.power_required_hover = inputs["power_required_hover"]
        self.power_deployment = inputs["power_deploy"]

        # Duration of each phase
        self.time_ascent = inputs["time_ascent"] 
        self.time_descent = inputs["time_descent"]
        self.time_cruise_max = inputs["time_cruise_max"]
        self.time_cruise_min = inputs["time_cruise_min"]
        self.time_scan = inputs["time_scan"] # time during hover without having the winch activated
        self.time_deploy = inputs["time_deploy"] # time during hover with having the winch activated

        # Battery parameters
        self.n_battery = inputs["n_battery"]
        self.battery_capacity = inputs["battery_capacity"]
        self.battery_potential = inputs["battery_potential"]
        self.battery_resistance = inputs["battery_resistance"]

    # ~~~ Intermediate Functions ~~~

    def battery_heat_dissipated(self, power_required: float, time: float,) -> float:
        '''
        Returns the heat dissipated by all batteries and the total heat energy from all batteries based on the power required and duration of a certain phase
        '''
        battery_current = power_required / (self.battery_potential * self.n_battery) # A, current per battery
        battery_heat = battery_current**2 * self.battery_resistance # W, heat dissipated per battery
        total_battery_heat = battery_heat * self.n_battery # W, heat dissipated for all batteries combined
        total_battery_q = total_battery_heat * time # J, heat energy generated by all batteries combined
        
        return total_battery_heat, total_battery_q



    # ~~~ Output functions ~~~ 

    def get_all(self) -> dict[str, float]:
        '''
        Outputs:
        
        '''
        return outputs


if __name__ == '__main__':

    prop = Propulsion(funny_inputs)
    funny_inputs = prop.get_all()

    # power = Power(funny_inputs)
    # funny_inputs = power.get_all()

    mission = Mission(funny_inputs)
    funny_inputs = mission.get_all()

    deployment = Deployment(funny_inputs)
    funny_inputs = deployment.get_all()

    thermal = Thermal(funny_inputs)
    outputs = thermal.get_all()